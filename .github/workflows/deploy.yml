name: Deploy Infra to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          # Verify secrets are set
          if [ -z "$SSH_PRIVATE_KEY" ]; then
            echo "❌ Error: EC2_SSH_KEY secret is not set or is empty"
            exit 1
          fi
          if [ -z "$EC2_HOST" ]; then
            echo "❌ Error: EC2_HOST secret is not set or is empty"
            exit 1
          fi
          
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Verify key was written
          if [ ! -s ~/.ssh/id_rsa ]; then
            echo "❌ Error: SSH key file is empty after writing"
            exit 1
          fi
          
          # Verify EC2_HOST format (should be IP or hostname, no extra characters)
          echo "EC2_HOST value: $EC2_HOST"
          
          # Add host to known_hosts with timeout
          echo "Adding $EC2_HOST to known_hosts..."
          if ssh-keyscan -H -T 10 $EC2_HOST >> ~/.ssh/known_hosts 2>&1; then
            echo "✅ ssh-keyscan succeeded"
          else
            echo "⚠️  Warning: ssh-keyscan failed (exit code $?)"
            echo "This might be due to firewall rules or GitHub Actions IPs not allowed on port 22"
            echo "Disabling strict host key checking for this host..."
            # Create SSH config to skip host key verification
            echo "Host *" >> ~/.ssh/config
            echo "    StrictHostKeyChecking no" >> ~/.ssh/config
            echo "    UserKnownHostsFile=/dev/null" >> ~/.ssh/config
            chmod 600 ~/.ssh/config
          fi
          
          echo "✅ SSH setup complete"

      - name: Test SSH Connection
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          echo "Testing SSH connection to $EC2_USER@$EC2_HOST..."
          ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 $EC2_USER@$EC2_HOST "echo 'SSH connection successful'; pwd"

      - name: Copy files to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          echo "Creating directory on EC2..."
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $EC2_USER@$EC2_HOST "mkdir -p ~/sentiment-infra"
          
          echo "Copying files to EC2..."
          rsync -avz --delete \
            -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.env' \
            ./ $EC2_USER@$EC2_HOST:~/sentiment-infra/
          
          echo "✅ Files copied successfully"

      - name: Create .env file on EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          N8N_ENCRYPTION_KEY: ${{ secrets.N8N_ENCRYPTION_KEY }}
          N8N_BASIC_AUTH_USER: ${{ secrets.N8N_BASIC_AUTH_USER }}
          N8N_BASIC_AUTH_PASSWORD: ${{ secrets.N8N_BASIC_AUTH_PASSWORD }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          N8N_CORS_ORIGIN: ${{ secrets.N8N_CORS_ORIGIN }}
        run: |
          echo "Creating .env file on EC2..."
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $EC2_USER@$EC2_HOST "cd ~/sentiment-infra && bash scripts/setup-env.sh" <<EOF
          $POSTGRES_USER
          $POSTGRES_PASSWORD
          $POSTGRES_DB
          $N8N_ENCRYPTION_KEY
          $N8N_BASIC_AUTH_USER
          $N8N_BASIC_AUTH_PASSWORD
          $WEBHOOK_URL
          $N8N_CORS_ORIGIN
          EOF
          echo "✅ Environment file created"

      - name: Deploy with Docker Compose
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          echo "Running deployment script..."
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $EC2_USER@$EC2_HOST "cd ~/sentiment-infra && bash scripts/deploy.sh"

      - name: Import n8n workflows
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          echo "Importing n8n workflows..."
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $EC2_USER@$EC2_HOST "cd ~/sentiment-infra && bash scripts/import-n8n-workflows.sh"

      - name: Health check
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          echo "Running health check..."
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $EC2_USER@$EC2_HOST "cd ~/sentiment-infra && bash scripts/health-check.sh"

      - name: Deployment Summary
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "✅ Deployment completed successfully!"
          echo ""
          echo "🔗 Access your services:"
          echo "   - n8n UI: http://$EC2_HOST:5678"
          echo "   - Adminer: http://$EC2_HOST:8080"
          echo "   - PostgreSQL: $EC2_HOST:5432"
          echo ""
          echo "📝 Next steps:"
          echo "   1. Visit n8n UI and log in with your credentials"
          echo "   2. Verify workflows are imported"
          echo "   3. Check database with Adminer"
