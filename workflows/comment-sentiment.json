{
  "nodes": [
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -800,
        0
      ],
      "id": "0b760119-2f57-4478-8cdd-4b3041917516",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "ftfBSNeamb0UOYeN",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -512,
        160
      ],
      "id": "0f14d30a-ffe2-4768-ab52-35475b9f22ce",
      "name": "Merge"
    },
    {
      "parameters": {
        "inputText": "=Comment:\n\"\"\"\"\n{{ $json.comment_content }}\n\"\"\"\"\nPost:\n\"\"\"\"\n{{ $json.post_content }}\n\"\"\"\"",
        "options": {
          "categories": "Positive",
          "systemPromptTemplate": "You are highly intelligent and accurate sentiment analyzer. Analyze the sentiment of the provided text. Categorize it into one of the following: {categories}. Use the provided formatting instructions. Only output the JSON.",
          "includeDetailedResults": true,
          "enableAutoFixing": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.sentimentAnalysis",
      "typeVersion": 1.1,
      "position": [
        -864,
        -224
      ],
      "id": "135c776c-6167-4ada-b9c5-62936149dec4",
      "name": "Positive Sentiment Analysis",
      "executeOnce": false
    },
    {
      "parameters": {
        "inputText": "=Comment:\n\"\"\"\"\n{{ $json.comment_content }}\n\"\"\"\"\nPost:\n\"\"\"\"\n{{ $json.post_content }}\n\"\"\"\"",
        "options": {
          "categories": "Neutral",
          "systemPromptTemplate": "You are highly intelligent and accurate sentiment analyzer. Analyze the sentiment of the provided comment in regards to the post. Categorize it into one of the following: {categories}. Use the provided formatting instructions. Only output the JSON.",
          "includeDetailedResults": true,
          "enableAutoFixing": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.sentimentAnalysis",
      "typeVersion": 1.1,
      "position": [
        -864,
        176
      ],
      "id": "185e6d8a-96ac-44df-9881-53fd1ecd36cc",
      "name": "Neutral Sentiment Analysis",
      "executeOnce": false
    },
    {
      "parameters": {
        "inputText": "=Comment:\n\"\"\"\"\n{{ $json.comment_content }}\n\"\"\"\"\nPost:\n\"\"\"\"\n{{ $json.post_content }}\n\"\"\"\"",
        "options": {
          "categories": "Negative",
          "systemPromptTemplate": "You are highly intelligent and accurate sentiment analyzer. Analyze the sentiment of the provided text. Categorize it into one of the following: {categories}. Use the provided formatting instructions. Only output the JSON.",
          "includeDetailedResults": true,
          "enableAutoFixing": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.sentimentAnalysis",
      "typeVersion": 1.1,
      "position": [
        -864,
        368
      ],
      "id": "cd7f1ed3-f0bd-4e82-b33a-e6cc0d3c16c1",
      "name": "Negative Sentiment Analysis",
      "executeOnce": false
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {
          "responseFormat": "json_object",
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        240,
        496
      ],
      "id": "f197f1d8-5822-4bec-b0b5-d74c8ce5fed9",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "ftfBSNeamb0UOYeN",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// One output item per comment_id with analyses = { Positive, Negative, Neutral }.\n// If multiples arrive for the same category, keep the one with higher confidence.\n\nfunction best(prev, next) {\n  if (!prev) return next;\n  return (Number(next.confidence) > Number(prev.confidence)) ? next : prev;\n}\n\nconst byComment = new Map();\n\nfor (const { json } of items) {\n  const cid = json.comment_id;\n  if (!byComment.has(cid)) {\n    byComment.set(cid, {\n      post_id: json.post_id,\n      post_content: json.post_content ?? null,\n      comment_id: json.comment_id,\n      comment_content: json.comment_content ?? null,\n      analyses: { Positive: null, Neutral: null, Negative: null }\n    });\n  }\n\n  const sa = json.sentimentAnalysis || {};\n  const rec = {\n    category: sa.category || 'Unknown',\n    strength: Number(sa.strength ?? 0),\n    confidence: Number(sa.confidence ?? 0),\n  };\n\n  const bucket = byComment.get(cid);\n  const cat = rec.category;\n  if (cat in bucket.analyses) {\n    bucket.analyses[cat] = best(bucket.analyses[cat], rec);\n  } else {\n    // If an unexpected category appears, store it anyway\n    bucket.analyses[cat] = best(bucket.analyses[cat], rec);\n  }\n}\n\n// Fill missing categories with zeros to keep a stable shape\nfor (const v of byComment.values()) {\n  for (const k of ['Positive','Neutral','Negative']) {\n    if (!v.analyses[k]) v.analyses[k] = { category: k, strength: 0, confidence: 0 };\n  }\n}\n\nreturn Array.from(byComment.values()).map(j => ({ json: j }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -288,
        176
      ],
      "id": "98a82191-9d04-4a0e-8805-f8db7d7e8f94",
      "name": "Combine Sentiment Analysis Results"
    },
    {
      "parameters": {
        "jsCode": "function clamp01(x){ const n = Number(x); return isFinite(n) ? Math.min(1, Math.max(0, n)) : 0; }\nfunction safe(A, name){ return A?.[name] || { strength: 0, confidence: 0 }; }\n\nreturn items.map(({json:j}) => {\n  const A = j.analyses || {};\n  const P = safe(A, 'Positive');\n  const N = safe(A, 'Negative');\n  const Z = safe(A, 'Neutral');\n\n  const ps = clamp01(P.strength), pc = clamp01(P.confidence);\n  const ns = clamp01(N.strength), nc = clamp01(N.confidence);\n  const zs = clamp01(Z.strength), zc = clamp01(Z.confidence);\n\n  const pEff = ps * (0.5 + 0.5 * pc);\n  const nEff = ns * (0.5 + 0.5 * nc);\n  const zEff = zs * (0.5 + 0.5 * zc);\n  const sum  = pEff + nEff + zEff || 1;\n\n  const probabilities = {\n    Positive: pEff / sum,\n    Negative: nEff / sum,\n    Neutral:  zEff / sum,\n  };\n\n  const sentiment = Object.entries(probabilities).sort((a,b)=>b[1]-a[1])[0][0];\n  const overall_confidence = Math.min(1,\n    probabilities.Positive * pc +\n    probabilities.Negative * nc +\n    probabilities.Neutral  * zc\n  );\n  const polarity = probabilities.Positive - probabilities.Negative;\n  const confRounded = Math.round(overall_confidence * 100) / 100;\n\n  return {\n    json: {\n      post_id: j.post_id,\n      post_content: j.post_content ?? null,\n      comment_id: j.comment_id,\n      comment_content: j.comment_content ?? null,\n      sentiment,\n      sentiment_category_name: sentiment,\n      confidence: confRounded,\n      probabilities,\n      polarity\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -64,
        176
      ],
      "id": "a960135d-3b82-4929-8bdd-065898ffe2b0",
      "name": "Prepare/Calculate Sentiment rows"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Context:\nPOST: {{ $json.post_content }}\nCOMMENT: {{ $json.post_content }}\n\nScores:\n- Winner label: {{$json.sentiment}}\n- Confidence: {{$json.confidence}}\n- Probabilities: Positive={{$json.probabilities.Positive}}, Negative={{$json.probabilities.Negative}}, Neutral={{$json.probabilities.Neutral}}\n- Polarity: {{$json.polarity}}\n\nRequirements:\n- Base conclusions on the numbers; use the texts only to choose phrasing (e.g., \"supportive\", \"inquiring\").\n- \"certainty\" policy:\n  - \"high\" if confidence ≥ 0.80 and (max probability − second max) ≥ 0.20\n  - \"medium\" if confidence ≥ 0.60\n  - \"low\" otherwise.\n- 1–2 sentences, plain language.\n\nReturn JSON only:\n{\n  \"comment_id\": {{ $json.comment_id }}\n  \"analysis_text\": \"...\"\n}\n",
        "messages": {
          "messageValues": [
            {
              "message": "You are a precise sentiment analyst. Explain the commenter’s tone grounded in the numeric scores and the texts.  Do not invent facts. Be concise (1–2 sentences). Return strict JSON only."
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        160,
        272
      ],
      "id": "67ad271e-2d3b-4913-aad2-870733f68f82",
      "name": "Textual Sentiment Analysis Generation"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "sentiments",
          "mode": "list",
          "cachedResultName": "sentiments"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "post_id": "={{ $json.post_id }}",
            "comment_id": "={{ $json.comment_id }}",
            "sentiment": "={{ $json.analysis_text }}",
            "sentiment_category": "={{ $json.sentiment_category_name }}",
            "confidence": "={{ $json.confidence }}",
            "probabilities": "={{ $json.probabilities }}",
            "polarity": "={{ $json.polarity }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "post_id",
              "displayName": "post_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "comment_id",
              "displayName": "comment_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "sentiment",
              "displayName": "sentiment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "sentiment_category",
              "displayName": "sentiment_category",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "confidence",
              "displayName": "confidence",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "probabilities",
              "displayName": "probabilities",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            },
            {
              "id": "polarity",
              "displayName": "polarity",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        736,
        176
      ],
      "id": "c6e618c8-4b81-442d-877e-3619353ec68f",
      "name": "Insert Sentiment Analysis Results",
      "credentials": {
        "postgres": {
          "id": "woyOxDEFmPDOvdit",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1088,
        176
      ],
      "id": "a417bc0e-35b4-40d8-888e-1d5b6ac515f1",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "comment_id",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        512,
        176
      ],
      "id": "5f9e1c59-415f-440c-b53c-bc42dad8f6e7",
      "name": "Final Normalization before Insert operation"
    }
  ],
  "connections": {
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Negative Sentiment Analysis",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Neutral Sentiment Analysis",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Positive Sentiment Analysis",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Combine Sentiment Analysis Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Positive Sentiment Analysis": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Neutral Sentiment Analysis": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Negative Sentiment Analysis": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Textual Sentiment Analysis Generation",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Combine Sentiment Analysis Results": {
      "main": [
        [
          {
            "node": "Prepare/Calculate Sentiment rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare/Calculate Sentiment rows": {
      "main": [
        [
          {
            "node": "Textual Sentiment Analysis Generation",
            "type": "main",
            "index": 0
          },
          {
            "node": "Final Normalization before Insert operation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Textual Sentiment Analysis Generation": {
      "main": [
        [
          {
            "node": "Final Normalization before Insert operation",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Insert Sentiment Analysis Results": {
      "main": [
        []
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Positive Sentiment Analysis",
            "type": "main",
            "index": 0
          },
          {
            "node": "Neutral Sentiment Analysis",
            "type": "main",
            "index": 0
          },
          {
            "node": "Negative Sentiment Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Final Normalization before Insert operation": {
      "main": [
        [
          {
            "node": "Insert Sentiment Analysis Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "6b2cd1a66d40c4caef13c8b83faa61b3718613d8dc26636859e6b32022cebfe6"
  }
}